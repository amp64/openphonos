<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:asyncImageLoader="clr-namespace:AsyncImageLoader;assembly=AsyncImageLoader.Avalonia"
			 xmlns:ic="using:FluentIcons.Avalonia.MarkupExtensions"
             xmlns:vm="clr-namespace:PhonosAvalon.ViewModels"
			 xmlns:views="clr-namespace:PhonosAvalon.Views;assembly=PhonosAvalon"
			 xmlns:dialogHostAvalonia="clr-namespace:DialogHostAvalonia;assembly=DialogHost.Avalonia"
             mc:Ignorable="d" d:DesignWidth="1170" d:DesignHeight="2532"
             x:Class="PhonosAvalon.Views.MobileMainView"
             x:DataType="vm:MainViewModel"
			 x:CompileBindings="True">
	<Design.DataContext>
		<vm:FakeMainViewModel />
	</Design.DataContext>

	<dialogHostAvalonia:DialogHost x:Name="DialogHost">
		<dialogHostAvalonia:DialogHost.IsOpen>
			<MultiBinding Converter="{x:Static BoolConverters.Or}">
				<Binding Path="VolumePopupOpen"/>
				<Binding Path="GroupEditorOpen"/>
				<Binding Path="QueuePopupOpen"/>
			</MultiBinding>
		</dialogHostAvalonia:DialogHost.IsOpen>
		<dialogHostAvalonia:DialogHost.DialogContent>
			<Grid>
				<views:GroupVolumeView DataContext="{Binding CurrentZone}" IsVisible="{Binding $parent[dialogHostAvalonia:DialogHost].((vm:MainViewModel)DataContext).VolumePopupOpen, Mode=TwoWay}"/>
				<views:GroupEditorView DataContext="{Binding CurrentZone}" IsVisible="{Binding $parent[dialogHostAvalonia:DialogHost].((vm:MainViewModel)DataContext).GroupEditorOpen, Mode=TwoWay}"/>
				<views:QueueView DataContext="{Binding CurrentZone}" IsVisible="{Binding $parent[dialogHostAvalonia:DialogHost].((vm:MainViewModel)DataContext).QueuePopupOpen, Mode=TwoWay}"/>
			</Grid>
		</dialogHostAvalonia:DialogHost.DialogContent>

		<Grid Margin="4">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="Auto"/>
			</Grid.RowDefinitions>

			<ComboBox x:Name="RoomCombo" SelectedItem="{Binding CurrentZone, Mode=TwoWay}"
					  HorizontalAlignment="Stretch"
					  Margin="0,0,0,4"
					  Height="60"
					  ItemsSource="{Binding ZoneList}">
				<ComboBox.ItemTemplate>
					<DataTemplate x:DataType="vm:GroupViewModel">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="23"/>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="42"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="*"/>
								<RowDefinition Height="*"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2"
									   Text="{Binding Summary}" FontWeight="Bold"/>
							<TextBlock Grid.Row="1" Grid.Column="1"
									   IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}, Path=!IsSelected, FallbackValue='False', TargetNullValue='True'}"
									   Text="{Binding NowPlaying.TrackTitle}" FontSize="12"/>
							<TextBlock Grid.Row="2" Grid.Column="1"
									   IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}, Path=!IsSelected, FallbackValue='False', TargetNullValue='True'}"
									   Text="{Binding NowPlaying.Artist}" FontSize="10"/>
							<Button Grid.RowSpan="3" Grid.Column="2"
									Classes="IconStyle"
									IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}, Path=IsSelected, FallbackValue='True', TargetNullValue='False'}"
									Command="{Binding $parent[Grid;2].((vm:MainViewModel)DataContext).GroupEditorCommand}"
									Height="32" Content="{ic:SymbolIcon Symbol=SpeakerEdit}" HorizontalContentAlignment="Center" Margin="4,0,4,0"
										/>
							<Image Grid.RowSpan="3" Grid.Column="2"
								   IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}, Path=!IsSelected, FallbackValue='False', TargetNullValue='True'}"
								   asyncImageLoader:ImageLoader.Source="{Binding NowPlaying.Thumbnail}"/>
						</Grid>
					</DataTemplate>
				</ComboBox.ItemTemplate>
			</ComboBox>

			<Grid Grid.Row="1" ColumnDefinitions="*,*" RowDefinitions="*,Auto">
				<Image Grid.Column="0" asyncImageLoader:ImageLoader.Source="{Binding CurrentZone.NowPlaying.Art}"
					   x:Name="AlbumImage"
					   Stretch="UniformToFill" HorizontalAlignment="Center" VerticalAlignment="Center"/>

				<ProgressBar x:Name="TrackProgress"
							 Grid.Row="1" Grid.Column="0"
							 Margin="0,4,0,0"
							 HorizontalAlignment="Center"
							 Value="{Binding CurrentZone.NowPlaying.Position, FallbackValue=0, Mode=OneWay}"
						 />

				<views:CompactNowPlayingView Grid.Column="1" Margin="4,8,4,8" DataContext="{Binding CurrentZone}"/>
				<Button Grid.Column="1" 
						HorizontalAlignment="Right" VerticalAlignment="Bottom"
						Content="{ic:SymbolIcon Symbol=TaskList}"
						Width="42"
						Classes="IconStyle"
						Command="{Binding QueuePopupCommand}"/>
			</Grid>

			<Grid Grid.Row="3">
				<views:MusicPickerView IsVisible="True"
					Margin="0,8,0,0"
					DataContext="{Binding CurrentZone}"/>
			</Grid>

			<Grid Grid.Row="4" VerticalAlignment="Top"
					  ColumnDefinitions="*,60">
				<views:VolumeView DataContext="{Binding CurrentZone.GroupVolume}"/>
				<Button Grid.Column="1" 
						Content="{ic:SymbolIcon Symbol=SpeakerSettings}" Width="42"
						Classes="IconStyle"
						IsEnabled="{Binding !!CurrentZone.Players.Count, FallbackValue=False, TargetNullValue=False}"
						Command="{Binding VolumePopupCommand}"/>
			</Grid>

			<Grid Grid.Row="5">
				<views:TransportControlView DataContext="{Binding CurrentZone.NowPlaying}"/>
			</Grid>
		</Grid>
	</dialogHostAvalonia:DialogHost>
</UserControl>
